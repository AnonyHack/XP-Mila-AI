from pyrogram import Client, filters, enums
from pyrogram.types import InputMediaPhoto
from database import BotDatabase
from utils.keyboard import build_about_keyboard, build_main_menu
from config import BOT_NAME, BOT_USERNAME, OWNER_USERNAME, WELCOME_IMAGE, WELCOME_MESSAGE
import logging

logger = logging.getLogger(__name__)

db = BotDatabase()

# Single about page
ABOUT_PAGE = """
<blockquote>
‚çü‚îÄ‚îÄ‚îÄ[ ·¥ç è ·¥Ö·¥á·¥õ·¥Ä…™ üÍú± ]‚îÄ‚îÄ‚îÄ‚çü

‚Ä£ ·¥ç è …¥·¥Ä·¥ç·¥á : <a href="https://t.me/{bot_username}">{BOT_NAME}</a> üîç
‚Ä£ ·¥ç è  ô·¥ás·¥õ “ì Ä…™·¥á…¥·¥Ö : <a href="tg://settings">·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥</a>
‚Ä£ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä : <a href="https://t.me/{owner_username}">·¥Ö·¥á·¥†</a>
‚Ä£  ü…™ ô Ä·¥Ä Ä è : <a href="https://docs.pyrogram.org/">·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç</a>
‚Ä£  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á : <a href="https://www.python.org/download/releases/3.0/">·¥ò è·¥õ ú·¥è…¥ 3</a>
‚Ä£ ·¥Ö·¥Ä·¥õ·¥Ä  ô·¥Äs·¥á : <a href="https://www.mongodb.com/">·¥ç·¥è…¥…¢·¥è ·¥Ö ô</a>
‚Ä£  ô·¥è·¥õ s·¥á Ä·¥†·¥á Ä : <a href="https://render.com/"> Ä·¥á…¥·¥Ö·¥á Ä</a>
‚Ä£  ô·¥ú…™ ü·¥Ö s·¥õ·¥Ä·¥õ·¥ús : <a href="#">·¥†1.0 [s·¥õ·¥Ä ô ü·¥á]</a>
‚çü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚çü
</blockquote>
"""

@Client.on_callback_query(filters.regex(r"about_page_1"))
async def about_callback(client: Client, callback_query):
    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name or "darling"
    
    # Check if user is verified
    if not db.is_user_verified(user_id):
        await callback_query.answer("Please join the required channels first! üíñ", show_alert=True)
        return
    
    # Format about text
    try:
        bot_username = BOT_USERNAME.lstrip('@') if BOT_USERNAME else "unknown"
        owner_username = OWNER_USERNAME.lstrip('@') if OWNER_USERNAME else "unknown"
        about_text = ABOUT_PAGE.format(
            BOT_NAME=BOT_NAME,
            bot_username=bot_username,
            owner_username=owner_username
        )
        
        # Update media and caption in one call
        await callback_query.message.edit_media(
            media=InputMediaPhoto(WELCOME_IMAGE, caption=about_text, parse_mode=enums.ParseMode.HTML),
            reply_markup=build_about_keyboard(1, 1)  # Single page
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error updating about message: {e}")
        await callback_query.message.edit_text(
            text=about_text,
            reply_markup=build_about_keyboard(1, 1),
            parse_mode=enums.ParseMode.HTML
        )
        await callback_query.answer()

@Client.on_callback_query(filters.regex("about_home"))
async def about_home_callback(client: Client, callback_query):
    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name or "darling"
    
    # Check if user is verified
    if not db.is_user_verified(user_id):
        await callback_query.answer("Please join the required channels first! üíñ", show_alert=True)
        return
    
    # Return to main menu
    try:
        await callback_query.message.edit_media(
            media=InputMediaPhoto(WELCOME_IMAGE, caption=WELCOME_MESSAGE.format(user_name=first_name), parse_mode=enums.ParseMode.HTML),
            reply_markup=build_main_menu()
        )
        await callback_query.answer("‚úÖ Returned to main menu!")
    except Exception as e:
        logger.error(f"Error editing welcome message: {e}")
        await callback_query.message.edit_text(
            text=WELCOME_MESSAGE.format(user_name=first_name),
            reply_markup=build_main_menu(),
            parse_mode=enums.ParseMode.HTML
        )
        await callback_query.answer("‚úÖ Returned to main menu!")

@Client.on_callback_query(filters.regex("about_close"))
async def about_close_callback(client: Client, callback_query):
    try:
        await callback_query.message.delete()
        await callback_query.answer("üíï Chat closed, but I‚Äôm always here for you, love! üòò")
    except Exception as e:
        logger.error(f"Error closing about: {e}")

        await callback_query.answer("Something went wrong, sweetie. Try again? üíñ", show_alert=True)
